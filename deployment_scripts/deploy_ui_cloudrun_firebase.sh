#!/bin/bash\n# UI-only deployment script for AUIChat\n# This script deploys only the UI component and configures it to use an existing RAG endpoint\n\n# Colors for better readability\nGREEN=\'\\033[0;32m\'\nBLUE=\'\\033[0;34m\'\nRED=\'\\033[0;31m\'\nYELLOW=\'\\033[1;33m\'\nNC=\'\\033[0m\' # No Color\n\n# Default values - changed to Cloud Run as default\nDEPLOYMENT_TYPE=\"cloudrun\"\nPROJECT_ID=\"deft-waters-458118-a3\"\nREGION=\"us-central1\"\nRAG_ENDPOINT=\"\"\n\n# Display help message\nfunction show_help {\n    echo -e \"${BLUE}AUIChat UI-Only Deployment Script${NC}\"\n    echo \"Usage: ./deploy_ui_only.sh [options]\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"  -t, --type        Deployment type: \'firebase\' or \'cloudrun\' (default)\"\n    echo \"  -p, --project     GCP project ID (if not provided, will use gcloud config)\"\n    echo \"  -r, --region      GCP region (default: us-central1)\"\n    echo \"  -e, --endpoint    RAG endpoint URL (if not provided, will use the URL from cloudrun_qdrant_info.json in project root)\"\n    echo \"  -h, --help        Show this help message\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"  ./deploy_ui_only.sh                  # Deploy UI to Cloud Run (default)\"\n    echo \"  ./deploy_ui_only.sh --type firebase  # Deploy to Firebase (requires Firebase setup)\"\n    echo \"  ./deploy_ui_only.sh --region europe-west1  # Deploy to Cloud Run in europe-west1\"\n    echo \"\"\n}\n\n# Parse command line arguments\nwhile [[ $# -gt 0 ]]; do\n    key=\"$1\"\n    case $key in\n        -t|--type)\n            DEPLOYMENT_TYPE=\"$2\"\n            shift 2\n            ;;\n        -p|--project)\n            PROJECT_ID=\"$2\"\n            shift 2\n            ;;\n        -r|--region)\n            REGION=\"$2\"\n            shift 2\n            ;;\n        -e|--endpoint)\n            RAG_ENDPOINT=\"$2\"\n            shift 2\n            ;;\n        -h|--help)\n            show_help\n            exit 0\n            ;;\n        *)\n            echo -e \"${RED}Unknown option: $1${NC}\"\n            show_help\n            exit 1\n            ;;\n    esac\ndone\n\n# Validate deployment type\nif [[ \"$DEPLOYMENT_TYPE\" != \"firebase\" && \"$DEPLOYMENT_TYPE\" != \"cloudrun\" ]]; then\n    echo -e \"${RED}Error: Deployment type must be \'firebase\' or \'cloudrun\'${NC}\"\n    show_help\n    exit 1\nfi\n\n# Determine project root (parent of the script\'s directory)\nSCRIPT_DIR=$(dirname \"$(realpath \"$0\")\")\nPROJECT_ROOT=$(dirname \"$SCRIPT_DIR\")\n\n# Check if we\'re in the correct directory structure\nif [[ ! -d \"$PROJECT_ROOT/rag_based_llm_auichat\" ]]; then\n    echo -e \"${RED}Error: Script expects to be in a subdirectory (e.g., \'deployment_scripts\') of the project root.${NC}\"\n    echo -e \"${RED}Project root determined as: $PROJECT_ROOT${NC}\"\n    echo -e \"${RED}Expected project root to contain \'rag_based_llm_auichat\' subdirectory.${NC}\"\n    exit 1\nfi\n\n# Set up environment variables\nif [[ -n \"$PROJECT_ID\" ]]; then\n    export PROJECT_ID=\"$PROJECT_ID\"\nfi\n\nexport REGION=\"$REGION\"\n\n# If RAG endpoint not provided, try to get it from cloudrun_qdrant_info.json in project root\nif [[ -z \"$RAG_ENDPOINT\" ]]; then\n    INFO_FILE_PATH=\"$PROJECT_ROOT/cloudrun_qdrant_info.json\"\n    if [[ -f \"$INFO_FILE_PATH\" ]]; then\n        echo -e \"${BLUE}Reading RAG endpoint from $INFO_FILE_PATH...${NC}\"\n        RAG_ENDPOINT=$(grep -o \'\"service_url\": *\"[^\"]*\"\' \"$INFO_FILE_PATH\" | awk -F\'\"\' \'{print $4}\')\n        if [[ -n \"$RAG_ENDPOINT\" ]]; then\n            echo -e \"${GREEN}Found RAG endpoint: $RAG_ENDPOINT${NC}\"\n        else\n            echo -e \"${YELLOW}Warning: Could not extract RAG endpoint from $INFO_FILE_PATH${NC}\"\n        fi\n    else\n        echo -e \"${YELLOW}Warning: $INFO_FILE_PATH not found. Please specify RAG endpoint with --endpoint.${NC}\"\n    fi\nfi\n\nif [[ -z \"$RAG_ENDPOINT\" ]]; then\n    echo -e \"${RED}Error: RAG endpoint URL is required. Please provide it with --endpoint or ensure cloudrun_qdrant_info.json exists in project root.${NC}\"\n    exit 1\nfi\n\n# Locate UI directory (assuming it\'s within rag_based_llm_auichat/src/UI/auichat)\nUI_DIR_RELATIVE=\"rag_based_llm_auichat/src/UI/auichat\"\nUI_DIR=\"$PROJECT_ROOT/$UI_DIR_RELATIVE\"\n\nif [[ ! -d \"$UI_DIR\" || ! -f \"$UI_DIR/package.json\" ]]; then\n    echo -e \"${RED}Error: UI directory not found at expected location: $UI_DIR${NC}\"\n    echo -e \"${YELLOW}Please ensure your UI project is at $UI_DIR_RELATIVE within the project root.${NC}\"\n    exit 1\nfi\n\necho -e \"${GREEN}Using UI directory: $UI_DIR${NC}\"\n\n# Function to check for required tools\nfunction check_dependencies {\n    echo -e \"${BLUE}Checking dependencies...${NC}\"\n    \n    # Check for Node.js and npm\n    if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then\n        echo -e \"${RED}Error: Node.js and npm are required but not installed.${NC}\"\n        echo -e \"${YELLOW}Please install Node.js from https://nodejs.org/${NC}\"\n        exit 1\n    fi\n    \n    # Check for gcloud\n    if ! command -v gcloud &> /dev/null; then\n        echo -e \"${RED}Error: Google Cloud SDK (gcloud) is required but not installed.${NC}\"\n        echo -e \"${YELLOW}Please install from https://cloud.google.com/sdk/docs/install${NC}\"\n        exit 1\n    fi\n    \n    # Check if user is logged in\n    if ! gcloud auth print-access-token &> /dev/null; then\n        echo -e \"${YELLOW}You need to log in to Google Cloud first.${NC}\"\n        gcloud auth login\n    fi\n    \n    # If project ID is not set, get it from gcloud config\n    if [[ -z \"$PROJECT_ID\" ]]; then\n        PROJECT_ID_FROM_CONFIG=$(gcloud config get-value project)\n        if [[ -z \"$PROJECT_ID_FROM_CONFIG\" ]]; then\n            echo -e \"${RED}No GCP project ID provided and none set in gcloud config.${NC}\"\n            echo -e \"${YELLOW}Please provide a project ID with --project or set it in gcloud config.${NC}\"\n            exit 1\n        fi\n        export PROJECT_ID=\"$PROJECT_ID_FROM_CONFIG\"\n    fi\n    \n    echo -e \"${GREEN}Using GCP project: $PROJECT_ID${NC}\"\n    \n    # Check for docker if deploying to Cloud Run\n    if [[ \"$DEPLOYMENT_TYPE\" == \"cloudrun\" ]]; then\n        if ! command -v docker &> /dev/null; then\n            echo -e \"${RED}Error: Docker is required for Cloud Run deployment but not installed.${NC}\"\n            echo -e \"${YELLOW}Please install Docker from https://docs.docker.com/get-docker/${NC}\"\n            exit 1\n        fi\n        \n        # Make sure docker is running\n        if ! docker info &> /dev/null; then\n            echo -e \"${RED}Error: Docker daemon is not running.${NC}\"\n            exit 1\n        fi\n    fi\n    \n    # Check for Firebase CLI if deploying to Firebase\n    if [[ \"$DEPLOYMENT_TYPE\" == \"firebase\" ]]; then\n        if ! command -v firebase &> /dev/null; then\n            echo -e \"${YELLOW}Firebase CLI not found. Installing...${NC}\"\n            npm install -g firebase-tools\n        fi\n    fi\n}\n\n# Configure the UI to use the RAG endpoint\nfunction configure_ui {\n    echo -e \"${BLUE}Configuring UI to use RAG endpoint: $RAG_ENDPOINT${NC}\"\n    \n    # Create or update .env file in UI directory\n    cat > \"$UI_DIR/.env\" << EOF\nVITE_API_URL=$RAG_ENDPOINT\nVITE_RAG_ENDPOINT=$RAG_ENDPOINT\n# Environment variables for AUIChat UI\n# Generated by deploy_ui_only.sh on $(date)\nEOF\n    \n    echo -e \"${GREEN}Created .env file with RAG endpoint configuration${NC}\"\n    \n    # Update any hardcoded API URLs in UI code\n    # This part is fragile and assumes a specific pattern. \n    # It\'s better if the UI consistently uses import.meta.env.VITE_API_URL\n    echo -e \"${YELLOW}Reminder: Ensure your UI code consistently uses \'import.meta.env.VITE_API_URL\' for the API endpoint.${NC}\"\n    # Example of a more targeted replacement if needed:\n    # find \"$UI_DIR/src\" -type f -name \'*.js\' -o -name \'*.ts\' -o -name \'*.jsx\' -o -name \'*.tsx\' -print0 | xargs -0 sed -i \"s|http://localhost:5001/api|import.meta.env.VITE_API_URL|g\"\n}\n\n# Build the UI\nfunction build_ui {\n    echo -e \"${BLUE}Building the UI...${NC}\"\n    \n    # Navigate to UI directory\n    cd \"$UI_DIR\"\n    \n    # Install dependencies if node_modules doesn\'t exist\n    if [[ ! -d \"node_modules\" ]]; then\n        echo -e \"${BLUE}Installing npm dependencies...${NC}\"\n        npm install\n    fi\n    \n    # Build the UI\n    echo -e \"${BLUE}Running build command...${NC}\"\n    npm run build\n    \n    # Check if build was successful\n    if [[ ! -d \"dist\" ]]; then\n        echo -e \"${RED}Error: Build failed. dist directory not created.${NC}\"\n        cd \"$PROJECT_ROOT\" # Go back to project root before exiting\n        exit 1\n    fi\n    \n    echo -e \"${GREEN}UI build completed successfully.${NC}\"\n    cd \"$PROJECT_ROOT\" # Go back to project root\n}\n\n# Deploy to Firebase\nfunction deploy_firebase {\n    echo -e \"${BLUE}Deploying UI to Firebase Hosting...${NC}\"\n    \n    # Create a temporary directory for Firebase deployment\n    TEMP_DIR=$(mktemp -d)\n    echo -e \"${BLUE}Creating temporary deployment directory: $TEMP_DIR${NC}\"\n    \n    # Copy build files to temporary directory\n    cp -r \"$UI_DIR/dist/\"* \"$TEMP_DIR/\"\n    \n    # Create firebase.json in temp directory\n    cat > \"$TEMP_DIR/firebase.json\" << EOF\n{\n  \"hosting\": {\n    \"public\": \".\",\n    \"ignore\": [\n      \"firebase.json\",\n      \"**/.*\",\n      \"**/node_modules/**\"\n    ],\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\nEOF\n    \n    # Deploy to Firebase\n    cd \"$TEMP_DIR\"\n    \n    echo -e \"${BLUE}Initializing Firebase project...${NC}\"\n    firebase use --add \"$PROJECT_ID\" || firebase init hosting --project \"$PROJECT_ID\"\n    \n    echo -e \"${BLUE}Deploying to Firebase...${NC}\"\n    # Use tee to capture the output and store in a variable\n    firebase deploy --only hosting --project \"$PROJECT_ID\" | tee /tmp/firebase_deploy_output.txt\n    \n    # Extract hosting URL - improved extraction method\n    HOSTING_URL=\"\"\n    # Try different methods to extract the hosting URL\n    if grep -q \"Hosting URL:\" /tmp/firebase_deploy_output.txt; then\n        HOSTING_URL=$(grep -o \'Hosting URL: .*\' /tmp/firebase_deploy_output.txt | cut -d\' \' -f3)\n    elif grep -q \"hosting:\" /tmp/firebase_deploy_output.txt; then\n        # Alternative attempt to extract URL\n        HOSTING_URL=$(grep -A 2 \'hosting:\' /tmp/firebase_deploy_output.txt | grep \'https://\' | tr -d \' \')\n    fi\n    \n    # If still not found, use the default URL format\n    if [[ -z \"$HOSTING_URL\" ]]; then\n        HOSTING_URL=\"https://${PROJECT_ID}.web.app\"\n        echo -e \"${YELLOW}Warning: Could not extract hosting URL from output. Using default: ${HOSTING_URL}${NC}\"\n    fi\n    \n    # Save deployment info to project root\n    cat > \"$PROJECT_ROOT/firebase_ui_info.json\" << EOF\n{\n  \"project_id\": \"$PROJECT_ID\",\n  \"hosting_url\": \"$HOSTING_URL\",\n  \"rag_endpoint\": \"$RAG_ENDPOINT\",\n  \"deployment_date\": \"$(date -u \"+%Y-%m-%d %H:%M:%S UTC\")\"\n}\nEOF\n    \n    # Clean up\n    rm -f /tmp/firebase_deploy_output.txt\n    rm -rf \"$TEMP_DIR\"\n    cd \"$PROJECT_ROOT\" # Go back to project root\n    \n    echo -e \"${GREEN}UI deployed successfully to Firebase Hosting!${NC}\"\n    echo -e \"${GREEN}Hosting URL: $HOSTING_URL${NC}\"\n}\n\n# Deploy to Cloud Run\nfunction deploy_cloudrun {\n    echo -e \"${BLUE}Deploying UI to Google Cloud Run...${NC}\"\n    \n    # Create temporary directory for deployment\n    TEMP_DIR=$(mktemp -d)\n    echo -e \"${BLUE}Creating temporary deployment directory: $TEMP_DIR${NC}\"\n    \n    # Copy build files to temporary directory\n    mkdir -p \"$TEMP_DIR/public\"\n    cp -r \"$UI_DIR/dist/\"* \"$TEMP_DIR/public/\"\n    \n    # Create express server file for serving the static files\n    cat > \"$TEMP_DIR/server.js\" << EOF\nconst express = require(\'express\');\nconst path = require(\'path\');\nconst cors = require(\'cors\');\n\nconst app = express();\nconst port = process.env.PORT || 8080;\n\n// Enable CORS\napp.use(cors());\n\n// Serve static files\napp.use(express.static(path.join(__dirname, \'public\')));\n\n// For all other routes, serve the index.html file\napp.get(\'*\', (req, res) => {\n  res.sendFile(path.join(__dirname, \'public\', \'index.html\'));\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(\\`AUIChat UI server running on port \${port}\\`);\n});\nEOF\n    \n    # Create package.json\n    cat > \"$TEMP_DIR/package.json\" << EOF\n{\n  \"name\": \"auichat-ui\",\n  \"version\": \"1.0.0\",\n  \"description\": \"AUIChat UI Server\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"cors\": \"^2.8.5\"\n  }\n}\nEOF\n    \n    # Create Dockerfile\n    cat > \"$TEMP_DIR/Dockerfile\" << EOF\nFROM node:18-slim\n\nWORKDIR /app\n\nCOPY package.json ./\nRUN npm install --production\n\nCOPY . .\n\n# Expose the port\nEXPOSE 8080\n\n# Start the server\nCMD [ \"npm\", \"start\" ]\nEOF\n    \n    # Build and deploy to Cloud Run\n    cd \"$TEMP_DIR\"\n    \n    # Build the docker image\n    echo -e \"${BLUE}Building Docker image...${NC}\"\n    IMAGE_NAME=\"gcr.io/$PROJECT_ID/auichat-ui:latest\"\n    docker build -t \"$IMAGE_NAME\" .\n    \n    # Push the image to Google Container Registry\n    echo -e \"${BLUE}Pushing Docker image to GCR...${NC}\"\n    gcloud auth configure-docker -q\n    docker push \"$IMAGE_NAME\"\n    \n    # Deploy to Cloud Run\n    echo -e \"${BLUE}Deploying to Cloud Run...${NC}\"\n    gcloud run deploy auichat-ui \\\n        --image \"$IMAGE_NAME\" \\\n        --platform managed \\\n        --region \"$REGION\" \\\n        --project \"$PROJECT_ID\" \\\n        --allow-unauthenticated \\\n        --quiet\n    \n    # Get the service URL\n    SERVICE_URL=$(gcloud run services describe auichat-ui \\\n        --region \"$REGION\" \\\n        --project \"$PROJECT_ID\" \\\n        --format \'value(status.url)\')\n    \n    # Save deployment info to project root\n    cat > \"$PROJECT_ROOT/cloudrun_ui_info.json\" << EOF\n{\n  \"service_name\": \"auichat-ui\",\n  \"service_url\": \"$SERVICE_URL\",\n  \"project_id\": \"$PROJECT_ID\",\n  \"region\": \"$REGION\",\n  \"image_name\": \"$IMAGE_NAME\",\n  \"rag_endpoint\": \"$RAG_ENDPOINT\",\n  \"deployment_date\": \"$(date -u \"+%Y-%m-%d %H:%M:%S UTC\")\"\n}\nEOF\n    \n    # Clean up\n    rm -rf \"$TEMP_DIR\"\n    cd \"$PROJECT_ROOT\" # Go back to project root\n    \n    echo -e \"${GREEN}UI deployed successfully to Cloud Run!${NC}\"\n    echo -e \"${GREEN}Service URL: $SERVICE_URL${NC}\"\n}\n\n# Main execution flow\ncheck_dependencies\nconfigure_ui\nbuild_ui\n\nif [[ \"$DEPLOYMENT_TYPE\" == \"firebase\" ]]; then\n    deploy_firebase\nelse  # cloudrun\n    deploy_cloudrun\nfi\n\necho -e \"${GREEN}UI deployment completed successfully!${NC}\"\necho -e \"${BLUE}The UI is now connected to your RAG endpoint: $RAG_ENDPOINT${NC}\"\n\n# Print the deployment info\nif [[ \"$DEPLOYMENT_TYPE\" == \"firebase\" && -f \"$PROJECT_ROOT/firebase_ui_info.json\" ]]; then\n    echo -e \"\\n${BLUE}======== Firebase Hosting Information ========${NC}\"\n    cat \"$PROJECT_ROOT/firebase_ui_info.json\"\n    echo -e \"${BLUE}==========================================${NC}\"\n    \n    HOSTING_URL=$(grep -o \'\"hosting_url\": *\"[^\"]*\"\' \"$PROJECT_ROOT/firebase_ui_info.json\" | awk -F\'\"\' \'{print $4}\')\n    echo -e \"\\n${GREEN}Your AUIChat UI is now available at: ${HOSTING_URL}${NC}\"\nelif [[ \"$DEPLOYMENT_TYPE\" == \"cloudrun\" && -f \"$PROJECT_ROOT/cloudrun_ui_info.json\" ]]; then\n    echo -e \"\\n${BLUE}======== Cloud Run Information ========${NC}\"\n    cat \"$PROJECT_ROOT/cloudrun_ui_info.json\"\n    echo -e \"${BLUE}====================================${NC}\"\n    \n    SERVICE_URL=$(grep -o \'\"service_url\": *\"[^\"]*\"\' \"$PROJECT_ROOT/cloudrun_ui_info.json\" | awk -F\'\"\' \'{print $4}\')\n    echo -e \"\\n${GREEN}Your AUIChat UI is now available at: ${SERVICE_URL}${NC}\"\nfi\n